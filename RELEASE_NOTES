This is release 4.1.1 of the SAL SDK (January 17th, 2020)

Changes for 4.1.1

Add support for metadata for cscID fields and for private_ fields

Add check for repeated topic names (with only case differences)

Add support for routine entry/exit tracking in verbose mode of salgenerator

Implement code inspector to generate CSC dependencies

Fix bug in getting ip address for LSST_DDS_IP

Support for no longer mandating Version and Alias tags in XML

Create yum repository on the Nexus 3 server

Add ts_sal_runtime and ts_sal_ATruntime rpm generators as default

Fix bug when no python environment is defined

Add idl only salgenerator test to test script


Changes for 4.1

Add  support for retreiving timestamp metadata in SALPY

Remove redundant metadata from topics

Add a salgenerator command that only generates the revision coded idl

Add a check for string length exceptions in C++/SALPY

Add support for subscriber/publisher existance checking

Add support for adding SAL_VERSION and XML_VERSION to idl

Add support for passing Unit and Description metadata to pydds via idl

Update RPM's to be relocatable where possible

Update default ospl.xml to allow unlimited participants per node


Changes for 4.0

Add support for RPI4 platform build

Add support for setting Enumeration values to use defined values

Add exception generation when null data structures passed to SAL methods

Support for using the Opensplice QoS specified in an XML file
specified using environment e.g. export LSST_DDS_QOS=file://${SAL_WORK_DIR}/DDS_DefaultQoS_All.xml

Added fields to ackcmd structure for host, origin, cmdtype and timeout

Added revCode to ackcmd on-the-wire DDS topics

Added support to pass host IP using environment e.g. export LSST_DDS_IP=10.0.100.1

Changed default DURABILITY to VOLATILE for commands and acks

Changed default history depth to 100 in code and QoS XML

Added support for customizing generic commands and events in SALSubsystems.xml

Added support for inserting PTP timestamps, and a daemon to maintain the leap seconds offset
(added call to retrieve current offset)

Add  JNI library for Java timestamps

Add units and descriptions to the autogenerated HTML object tables

Add more exit codes to salgenerator

Add getLastSample to C++ and SALPY API's

Fix bugs in Java all-in-one test generators

Revised SAL item database to be single table per subystem

Add environment to control history sync e.g. export LSST_DDS_HISTORYSYNC=30
(set default to 30 seconds)

Revised salgenerator pydds option to generate enum support

Remove deprecated parts of API


Changes for 3.9

Support for OpenSplice V6.9

EFD writers for Kafka and InfluxDB

RPM generation

Increased build and test efficiency

Upgrade to pybind11 wrapper


Changes for 3.8

Add SAL__STATE_ defines for generic states

Add support for Python OO library

Move CSC dictionary to ts_xml/sal_interfaces/SALSubsystems.xml and change to XML format

Remove generic Commands/Events from generated MagicDraw XMI importable

Change location of Nexus repository

Changes for 3.7.2

Update CSC list

Remove rougue setup file

Changes for 3.7.1

****************IMPORTANT***************************************************************
The salgenerator will no longer auto-generate generic commands or events, they must now 
be defined in the UML model and flow down to the XML from there.
****************************************************************************************

Please refer to the SAL User Guide for installation instructions.

Fixed java commanders to include an origin field (temporarily a default)

Fixed SQL table generator string handling

Improved runtime generator scripts

Reduced unit test time

Fixed LabVIEW command/response issues

Added missing pybind11 wrappers

Added generic UML generator with Magic Draw support

Moved checkStatus into SAL classes

Added tuneableQos support to java api

Cleaned up c++ with/without python library build

Changed generated Makefiles to use SAL_WORK_DIR for libraries

Speed up maven CI by ommitting no-value tests


Changes for 3.7.0.

Added support for Enumerations, either per item , or globally
(code support in C++,Java,Python,LabVIEW)

Bug fixes for Java code generation.

Add support for pybind11 based python wrappers. Boost::Python support
is now deprecated and will be removed in version 4.0.0

Add support for LargeFileObject announcment events

Update SAL User Guide

Add support for automatic creation of EFD writer processes.

Add script to automate updating of https://project.lsst.org/ts/sal_objects website

Fix LabVIEW Event handling

Add new CSC's for headerService's, ecc, summitFacility, atcs, vms

Add monitorCommand method for LabVIEW API

Upgrade Event Junit tests

Bug fixes for LabVIEW Monitor process

Add minimal Telemetry generation to  XML parser

Default to adding generic Commands and Events in XML parser if not preset in 
incoming XML files (temporary exception for m1m3 to use non-compliant generic command set)



Release 3.6 deprecated - do not use


Changes for 3.5.2

New CSC's for Auxillary Telesope (accs) and instrumentation
Default to Python3 compatability
Enumeration support in XML and downstream


Changes for 3.5.1

Provide compatability with the LSST OpenSpliceDDS 6.7 release
(salgenerator now avoids hardcoding the OpenSplice release number into the maven project generator)

Changes for 3.5.0

The LabVIEW interface is now based on passing Cluster datatypes which should make
it easier to use. The VI generation process is a little more involved, so please refer to 
the updated user guide (chapter 9) for more information.
    
The LabVIEW shared memory Monitor has been upgraded to support multiple (50) simulataneous
LabVIEW connections per machine and subsystem (due to this change, calling shmRelease prior
to application exit is now mandatory).
  
Removed sample XML object definition files to avoid confusion of versions. The definitive XML
should always be retreived from the LSST Stash ts_xml repository.
     
The Python interface has been modified to incorporate control of the Global Interpreter Lock
(GIL) to allow the DDS threads sufficient cpu time under high load conditions.

Added new commandable subsystems for DM (archiver, catchuparchiver, and processingcluster)
and OCS (sequencer).

Added salgenerator error detection for "no language" selected when using sal code generation.

Added hooks for per-topic QoS tuning control in future.

Added bandwidth documentation updater

Enhanced SAL object table html format table output

Added LABVIEW_HOME environment variable to permit user control

Added LSST_DDS_DOMAIN environment variable to allow DDS partitioning to 
isolate users when testing on the same network.



Changes for 3.4

Added generic Event types

Added Java controller tests

Added m2ms Telemetry items

Added ocs commands


Changes for 3.3

Add Dome commandable sub-systems for the major elements

Changes for 3.2.1 : 

Passed comprehensive Continuous Integration Python tests

Added LSST_[subsystem]_ID environment variable to select required instance
of subsytem at runtime (used for hexapod and rotator currently)

The Python interface has been modified to incorporate control of the Global Interpreter Lock
(GIL) to allow the DDS threads sufficient cpu time under high load conditions.

Changes for 3.2.0 : 

Passed initial Continuous Integration Python tests

Changes for 3.1.1 : 

Added SWIG based code generation option.

Passed Continuous Integration C++ tests

