

salReturn SAL_SALData::salCommand(char *cmdAlias)
{
  time_t sTime;
  int actorIdx = getActorIndex(cmdAlias);
  if (actorIdx < 0) {return SAL__ERROR;}
  string stopic1="keyedCommand";
  string stopic2="keyedResponse";
  string response="SALData_ackcmd";

  // create domain participant
  createParticipant(domainName);

  //create Publisher
  createPublisher(actorIdx);
  salTypeSupport(actorIdx);
  createSubscriber(SAL__SALData_ackcmd_ACTOR);
  createTopic(actorIdx,cmdAlias);

  if (sal[SAL__SALData_ackcmd_ACTOR].isReader == false) {
     //create types
     SALResponseTypeSupport_var mtr = new SALResponseTypeSupport();
     registerType2(SAL__SALData_ackcmd_ACTOR,mtr.in());

     //create Topics
     createTopic2(SAL__SALData_ackcmd_ACTOR,const_cast<char*>(response.c_str()));

     //create a reader for responses
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
     // Filter expr
     char buf[64];
     sprintf(buf, "SALDataID = %d", subsystemID);
     DDS::String_var sFilter = DDS::string_dup(buf);
     // Filter expr
     StringSeq sSeqExpr;
     sSeqExpr.length(0);
     // create topic
    createContentFilteredTopic2(SAL__SALData_ackcmd_ACTOR,"filteredResponse", sFilter.in(), sSeqExpr);
    // create DataReader
    createReader2(SAL__SALData_ackcmd_ACTOR,true);
#else
    createReader2(SAL__SALData_ackcmd_ACTOR,false);
#endif
    sal[SAL__SALData_ackcmd_ACTOR].sampleAge = 1.0e20;
    sal[SAL__SALData_ackcmd_ACTOR].isReader = true;
  }

  createWriter(actorIdx,true);
  sal[actorIdx].isCommand = true;
  sal[actorIdx].isWriter = true;
  sal[actorIdx].sndSeqNum = time(&sTime) + 32768*actorIdx;
  return SAL__OK;
}


salReturn SAL_SALData::salProcessor(char *cmdAlias)
{
  int actorIdx = getActorIndex(cmdAlias);
  if (actorIdx < 0) {return SAL__ERROR;}
  string stopic1="keyedCommand";
  string stopic2="keyedResponse";
  string response="SALData_ackcmd";

  // create domain participant
  createParticipant(domainName);

  createSubscriber(actorIdx);

  //create types
  salTypeSupport(actorIdx);
  createTopic(actorIdx,cmdAlias);


  //create Topics

  //create a reader for commands
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  // Filter expr
   char buf[64],buf2[200];
   sprintf(buf, "SALDataID = %d", subsystemID);
   DDS::String_var sFilter = DDS::string_dup(buf);
   // Filter expr
  StringSeq sSeqExpr;
  sSeqExpr.length(0);
  // create topic
   sprintf(buf2, "filteredCmd_%s", sal[actorIdx].topicHandle);
  createContentFilteredTopic(actorIdx,buf2, sFilter.in(), sSeqExpr);
 // create DataReader
  createReader(actorIdx,true);
#else
  createReader(actorIdx,false);
#endif
  sal[actorIdx].isProcessor = true;
  sal[actorIdx].isReader = true;
  sal[actorIdx].sampleAge = 1.0e20;


  if ( sal[SAL__SALData_ackcmd_ACTOR].isWriter == false) {
    //create Publisher
    createPublisher(SAL__SALData_ackcmd_ACTOR);
    SALResponseTypeSupport_var mtr = new SALResponseTypeSupport();
    registerType2(SAL__SALData_ackcmd_ACTOR,mtr.in());
    createTopic2(SAL__SALData_ackcmd_ACTOR,const_cast<char*>(response.c_str()));
    bool autodispose_unregistered_instances = true;
    createWriter2(SAL__SALData_ackcmd_ACTOR,autodispose_unregistered_instances);
    sal[SAL__SALData_ackcmd_ACTOR].isWriter = true;
  }

  return SAL__OK;
}


