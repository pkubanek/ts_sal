
//#include <chrono>
#include <sys/time.h>
#include <stdexcept>
#include <time.h>
#include <sys/types.h>
#include <unistd.h>
#include "SAL_SALData.h"
#include "QosProvider.h"
using namespace SALData;

SAL_SALData::SAL_SALData(int aKey)
{
   int v1,v2,v3,v4;
   bool tuneableQos = 1;
   char *dname = getenv("LSST_DDS_DOMAIN");
   char *qname = getenv("LSST_DDS_QOS");
   char *sname = getenv("LSST_DDS_HISTORYSYNC");
   char *ipaddr = getenv("LSST_DDS_IP");
   if ( dname != NULL ) {
      strncpy(domainName, dname, 128);
   } else {
      strncpy(domainName, "LSST", 128);
   }
   if ( qname != NULL ) {
      QosProvider qosProvider(qname,"DDS DefaultQosProfile");
      tuneableQos = 0;
   }
   if ( sname != NULL ) {
      sscanf(sname,"%d",&historySync);
   } else {
      historySync = 30;
   }
   ddsIPaddress = rand();
   if (ipaddr != NULL) {
      sscanf(ipaddr,"%d.%d.%d.%d", &v1 , &v2 , &v3 , &v4);
      ddsIPaddress = 256*256*256*v1 + 256*256*v2 + 256*v3 + v4;
   } 
   hasReader = false;
   hasWriter = false;
   hasCommand = false;
   hasProcessor = false;
   hasEventReader = false;
   hasEventWriter = false;
   subsystemID = aKey;
   debugLevel = 1;
   initSalActors(tuneableQos);
}

SAL_SALData::SAL_SALData()
{
   int v1,v2,v3,v4;
   int tuneableQos = 1;
   char *dname = getenv("LSST_DDS_DOMAIN");
   char *qname = getenv("LSST_DDS_QOS");
   char *sname = getenv("LSST_DDS_HISTORYSYNC");
   char *ipaddr = getenv("LSST_DDS_IP");
   if ( dname != NULL ) {
      strncpy(domainName, dname, 128);
   } else {
      strncpy(domainName, "LSST", 128);
   }
   if ( qname != NULL ) {
      QosProvider qosProvider(qname,"DDS DefaultQosProfile");
      tuneableQos = 0;
   }
   if ( sname != NULL ) {
      sscanf(sname,"%d",&historySync);
   } else {
      historySync = 30;
   }
   ddsIPaddress = 1;
   if (ipaddr != NULL) {
      sscanf(ipaddr,"%d.%d.%d.%d", &v1 , &v2, &v3, &v4);
      ddsIPaddress = 256*256*256*v1 + 256*256*v2 + 256*v3 + v4;
   } 
   hasReader = false;
   hasWriter = false;
   hasCommand = false;
   hasEventReader = false;
   hasEventWriter = false;
   hasProcessor = false;
   subsystemID = 0;
   debugLevel = 1;
   initSalActors(tuneableQos);
}

/**
 * Returns the name of an error code.
 **/
string SAL_SALData::getErrorName(DDS::ReturnCode_t status)
{
  return RetCodeName[status];
}

/**
 * Check the return status for errors. If there is an error, then terminate.
 **/
void SAL_SALData::checkStatus(DDS::ReturnCode_t status, const char *info)
{


  if (status != DDS::RETCODE_OK && status != DDS::RETCODE_NO_DATA)
  {
    cerr << "Error in " << info << ": " << getErrorName(status).c_str() << endl;
    throw std::runtime_error(getErrorName(status).c_str());
  }
}

/**
 * Check whether a valid handle has been returned. If not, then terminate.
 **/
void SAL_SALData::checkHandle(void *handle, string info)
{

  if (!handle)
  {
    cerr << "Error in " << info.c_str() << ": Creation failed: invalid handle" << endl;
    throw std::runtime_error("Creation failed: invalid handle");
  }
}


double SAL_SALData::getCurrentTime()
{
   struct timex tx;
   struct timespec now;
   double taiTime;

   memset(&tx, 0, sizeof(tx));
   adjtimex(&tx);
   clock_gettime(CLOCK_TAI,&now);
   taiTime = (double)now.tv_sec + (double)now.tv_nsec/1000000000.;
   return taiTime;
}

int SAL_SALData::getLeapSeconds()
{
   struct timex tx;

   memset(&tx, 0, sizeof(tx));
   adjtimex(&tx);
   return tx.tai;
}


double SAL_SALData::getRcvdTime(char *topicName)
{
    int actorIdx;
    actorIdx = getActorIndex(topicName);
    return sal[actorIdx].rcvStamp;
}

double SAL_SALData::getSentTime(char *topicName)
{
    int actorIdx;
    actorIdx = getActorIndex(topicName);
    return sal[actorIdx].sndStamp;
}


void SAL_SALData::setTuneableQos (char *topicName) {
    int actorIdx;
    actorIdx = getActorIndex(topicName);
    if (actorIdx > 0) {
       sal[actorIdx].tuneableQos = true;
    }
}


void SAL_SALData::setDefaultQos (char *topicName) {
    int actorIdx;
    actorIdx = getActorIndex(topicName);
    if (actorIdx > 0) {
       sal[actorIdx].tuneableQos = false;
    }
}


int SAL_SALData::getActorIndex (char *topicName)
{
  for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
     if ( strlen(topicName) == strlen(sal[i].topicName) )  {
       if ( strcmp(topicName,sal[i].topicName) == 0 )  {
          return i;
       }
     }
  }
  throw std::runtime_error("Unknown topic");
  return SAL__ERROR;
}

bool SAL_SALData::actorActive(int actorIdx) {
  if ( sal[actorIdx].isActive ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorReader(int actorIdx) {
  if ( sal[actorIdx].isReader ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorWriter(int actorIdx) {
  if ( sal[actorIdx].isWriter ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorCommand(int actorIdx) {
  if ( sal[actorIdx].isCommand ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorEventReader(int actorIdx) {
  if ( sal[actorIdx].isEventReader ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorEventWriter(int actorIdx) {
  if ( sal[actorIdx].isEventWriter ) {
     return true;
  }
  return false;
}

bool SAL_SALData::actorProcessor(int actorIdx) {
  if ( sal[actorIdx].isProcessor ) {
     return true;
  }
  return false;
}


int SAL_SALData::getIntProperty(int actorIdx,salCHAR *property)
{
  if (strcmp("ack", property) == 0) {return sal[actorIdx].ack;}
  if (strcmp("error", property) == 0) {return sal[actorIdx].error;}
  if (strcmp("rcvSeqNum", property) == 0) {return sal[actorIdx].rcvSeqNum;}
  return SAL__OK;
}




// INSERT TYPE SUPPORT      

salReturn SAL_SALData::salTelemetryPub(char *topicName)
{
  int actorIdx = -1;
  int status = 0;

  actorIdx = getActorIndex(topicName);
  if (actorIdx > -1) {
     status = salTelemetryPub(actorIdx);
  } else {
     status = SAL__ERROR;
     throw std::runtime_error("Unknown topic");
  }
  return status;
}

salReturn SAL_SALData::salTelemetrySub(char *topicName)
{
  int actorIdx = -1;
  int status = 0;

  actorIdx = getActorIndex(topicName);
  if (actorIdx > -1) {
     status = salTelemetrySub(actorIdx);
  } else {
     status = SAL__ERROR;
     throw std::runtime_error("Unknown topic");
  }
  return status;
}
 

salReturn SAL_SALData::salTelemetryPub(int actorIdx)
{
  // create domain participant
  createParticipant(domainName);

  //create type
  salTypeSupport(actorIdx);

  //create Topic
  createTopic(actorIdx);

  //create Publisher
  createPublisher(actorIdx);

  // create DataWriter :
  // If autodispose_unregistered_instances is set to true (default value),
  // you will have to start the subscriber before the publisher
  bool autodispose_unregistered_instances = true;
  createWriter(actorIdx,autodispose_unregistered_instances);
  DataWriter_var dwriter = getWriter(actorIdx);
  sal[actorIdx].isWriter = true;
  return SAL__OK;
}



       
salReturn SAL_SALData::salTelemetrySub(int actorIdx)
{
   // create domain participant
   createParticipant(domainName);

   //create type
   salTypeSupport(actorIdx);

   //create Topic
   createTopic(actorIdx);

   //create Subscriber
   createSubscriber(actorIdx);

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
   // Filter expr
   char buf[64];
   sprintf(buf, "SALDataID = %d", subsystemID);
   DDS::String_var sFilter = DDS::string_dup(buf);
   // Filter expr
   StringSeq sSeqExpr;
   sSeqExpr.length(0);
   // create topic
   char ftopicName[200];
   sprintf(ftopicName,"%s_%s","filtered",sal[actorIdx].topicHandle);
   createContentFilteredTopic(actorIdx,ftopicName, sFilter.in(), sSeqExpr);
   // create DataReader
   createReader(actorIdx,true);
#else
   createReader(actorIdx,false);
#endif
   sal[actorIdx].isReader = true;
   return SAL__OK;
}



void SAL_SALData::logError(salReturn status) 
{
   cout << "=== ERROR return value = " << status << endl; 
}

/*
using Clock = std::chrono::high_resolution_clock;
using Time_point = Clock::time_point;
using std::chrono::milliseconds;
using std::chrono::duration_cast;

salTIME SAL_SALData::currentTime()
{
    Time_point tp = Clock::now();   
    return (salTIME duration_cast<milliseconds>tp.count());
}
*/


// INSERT CMDALIAS SUPPORT  for issueCommandC and acceptCommandC, acceptAnyCommand   



salReturn SAL_SALData::cancelCommand( int cmdSeqNum )
{
   salReturn status = SAL__OK;
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}

salReturn SAL_SALData::abortCommand( int cmdSeqNum )
{
   salReturn status = SAL__OK;
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}

salReturn SAL_SALData::setDebugLevel( int level )
{
   debugLevel = level;
   salReturn status = SAL__OK;
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}

int SAL_SALData::getDebugLevel( int level )
{
   return debugLevel;
}

int SAL_SALData::getOrigin()
{
   salReturn status = SAL__OK;
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}
      
void SAL_SALData::setMaxSamples(int actorIdx, int n)
{
    if ( n < 0 ) {
       sal[actorIdx].maxSamples = LENGTH_UNLIMITED;
    } else {
       sal[actorIdx].maxSamples = n;
    }
}



int SAL_SALData::getProperty(salCHAR *property, salCHAR *value)
{
   salReturn status = SAL__OK;
   strcpy(value,"UNKNOWN");
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}

salReturn SAL_SALData::setProperty(salCHAR *property, salCHAR *value)
{
   if (status != SAL__OK) {
      if (debugLevel >= SAL__LOG_ROUTINES) {
          logError(status);
      }
   }
   return status;
}
 


// INSERT EVENTALIAS SUPPORT


salReturn SAL_SALData::salEventPub(char *topicName)
{
  int actorIdx = getActorIndex(topicName);

  if ( actorIdx < 0) {return SAL__ERROR;}
  salTelemetryPub(actorIdx);
  sal[actorIdx].isEventWriter = true;
  return SAL__OK;
}


salReturn SAL_SALData::salEventSub(char *topicName)
{
  int actorIdx = getActorIndex(topicName);

  if ( actorIdx < 0) {return SAL__ERROR;}

  // create domain participant
  createParticipant(domainName);

  //create type
  salTypeSupport(actorIdx);

  //create Topic
  createTopic(actorIdx);
  createSubscriber(actorIdx);

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
   // Filter expr
   char buf[64];
   sprintf(buf, "SALDataID = %d", subsystemID);
   DDS::String_var sFilter = DDS::string_dup(buf);
   // Filter expr
   StringSeq sSeqExpr;
   sSeqExpr.length(0);
   // create topic
   char ftopicName[200];
   sprintf(ftopicName,"%s_%s","filtered",sal[actorIdx].topicHandle);
   createContentFilteredTopic(actorIdx,ftopicName, sFilter.in(), sSeqExpr);
   // create DataReader
   createReader(actorIdx,true);
#else
   createReader(actorIdx,false);
#endif
   sal[actorIdx].isEventReader = true;
   return SAL__OK;
}


void SAL_SALData::salShutdown()
{
  if (participant != NULL) {
    participant->delete_contained_entities();
    deleteParticipant();
    participant = NULL;
  }
}

void SAL_SALData::createParticipant(const char *partitiontName)
{
  
  if (participant == NULL) {
    domain = DOMAIN_ID_DEFAULT;
    dpf = DomainParticipantFactory::get_instance();
    checkHandle(dpf.in(), "DDS::DomainParticipantFactory::get_instance");
    participant = dpf->create_participant(domain, PARTICIPANT_QOS_DEFAULT, NULL,STATUS_MASK_NONE);
    checkHandle(participant.in(),"DDS::DomainParticipantFactory::create_participant");
    partition = partitiontName;
  }
}

void SAL_SALData::deleteParticipant()
{
   status = dpf->delete_participant(participant.in());
   checkStatus(status, "DDS::DomainParticipant::delete_participant ");
}

void SAL_SALData::registerType(TypeSupport *ts)
{
  typeName = ts->get_type_name();
  status = ts->register_type(participant.in(), typeName);
  checkStatus(status, "register_type");
}

void SAL_SALData::registerType2(TypeSupport *ts)
{
  typeName2 = ts->get_type_name();
  status = ts->register_type(participant.in(), typeName2);
  checkStatus(status, "register_type");
}

void SAL_SALData::registerType(int actorIdx,TypeSupport *ts)
{
  sal[actorIdx].typeName = ts->get_type_name();
  status = ts->register_type(participant.in(), sal[actorIdx].typeName);
  checkStatus(status, "register_type");
}

void SAL_SALData::registerType2(int actorIdx,TypeSupport *ts)
{
  sal[actorIdx].typeName2 = ts->get_type_name();
  status = ts->register_type(participant.in(), sal[actorIdx].typeName2);
  checkStatus(status, "register_type");
}

void SAL_SALData::createTopic(int actorIdx)
{
  status = participant->get_default_topic_qos(sal[actorIdx].reliable_topic_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_topic_qos");
  if ( sal[actorIdx].tuneableQos) {
    sal[actorIdx].reliable_topic_qos.reliability.kind = RELIABLE_RELIABILITY_QOS;
    sal[actorIdx].reliable_topic_qos.durability.kind = sal[actorIdx].durability;
    sal[actorIdx].reliable_topic_qos.history.kind = KEEP_LAST_HISTORY_QOS;
    sal[actorIdx].reliable_topic_qos.history.depth = sal[actorIdx].historyDepth;
    sal[actorIdx].reliable_topic_qos.durability_service.history_depth = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_instances = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;

  /* Make the tailored QoS the new default. */
    status = participant->set_default_topic_qos(sal[actorIdx].reliable_topic_qos);
    checkStatus(status, "DDS::DomainParticipant::set_default_topic_qos");
  }

  sal[actorIdx].topic = participant->create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].reliable_topic_qos,
    NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].topic.in(), "DDS::DomainParticipant::create_topic ()");
}

void SAL_SALData::createTopic2(int actorIdx)
{
  status = participant->get_default_topic_qos(sal[actorIdx].reliable_topic_qos2);
  checkStatus(status, "DDS::DomainParticipant::get_default_topic_qos");
  if ( sal[actorIdx].tuneableQos) {
    sal[actorIdx].reliable_topic_qos2.reliability.kind = RELIABLE_RELIABILITY_QOS;
    sal[actorIdx].reliable_topic_qos2.durability.kind = sal[actorIdx].durability;
    sal[actorIdx].reliable_topic_qos2.history.kind = KEEP_LAST_HISTORY_QOS;
    sal[actorIdx].reliable_topic_qos2.history.depth = sal[actorIdx].historyDepth;
    sal[actorIdx].reliable_topic_qos2.durability_service.history_depth = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_instances = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;

  /* Make the tailored QoS the new default. */
    status = participant->set_default_topic_qos(sal[actorIdx].reliable_topic_qos2);
    checkStatus(status, "DDS::DomainParticipant::set_default_topic_qos");
  }

  sal[actorIdx].topic2 = participant->create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].reliable_topic_qos2,
    NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].topic2.in(), "DDS::DomainParticipant::create_topic ()");
}

void SAL_SALData::createTopic(int actorIdx, char *topicName)
{
  status = participant->get_default_topic_qos(sal[actorIdx].reliable_topic_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_topic_qos");
  if ( sal[actorIdx].tuneableQos) {
    sal[actorIdx].reliable_topic_qos.reliability.kind = RELIABLE_RELIABILITY_QOS;
    sal[actorIdx].reliable_topic_qos.durability.kind = sal[actorIdx].durability;
    sal[actorIdx].reliable_topic_qos.history.kind = KEEP_LAST_HISTORY_QOS;
    sal[actorIdx].reliable_topic_qos.history.depth = sal[actorIdx].historyDepth;
    sal[actorIdx].reliable_topic_qos.durability_service.history_depth = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_instances = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;

  /* Make the tailored QoS the new default. */
    status = participant->set_default_topic_qos(sal[actorIdx].reliable_topic_qos);
    checkStatus(status, "DDS::DomainParticipant::set_default_topic_qos");
  }
  sal[actorIdx].topic = participant->create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName, sal[actorIdx].reliable_topic_qos,
    NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].topic.in(), "DDS::DomainParticipant::create_topic ()");
}

void SAL_SALData::createTopic2(int actorIdx, char *topicName)
{
  status = participant->get_default_topic_qos(sal[actorIdx].reliable_topic_qos2);
  checkStatus(status, "DDS::DomainParticipant::get_default_topic_qos");
  if ( sal[actorIdx].tuneableQos) {
    sal[actorIdx].reliable_topic_qos2.reliability.kind = RELIABLE_RELIABILITY_QOS;
    sal[actorIdx].reliable_topic_qos2.durability.kind = sal[actorIdx].durability;
    sal[actorIdx].reliable_topic_qos2.history.kind = KEEP_LAST_HISTORY_QOS;
    sal[actorIdx].reliable_topic_qos2.history.depth = sal[actorIdx].historyDepth;
    sal[actorIdx].reliable_topic_qos2.durability_service.history_depth = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos2.resource_limits.max_samples = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos2.resource_limits.max_instances = sal[actorIdx].historyDepth;
//    sal[actorIdx].reliable_topic_qos2.resource_limits.max_samples_per_instance = sal[actorIdx].historyDepth;

  /* Make the tailored QoS the new default. */
    status = participant->set_default_topic_qos(sal[actorIdx].reliable_topic_qos2);
    checkStatus(status, "DDS::DomainParticipant::set_default_topic_qos");
  }
  sal[actorIdx].topic2 = participant->create_topic(sal[actorIdx].topicHandle, sal[actorIdx].typeName2, sal[actorIdx].reliable_topic_qos2,
    NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].topic2.in(), "DDS::DomainParticipant::create_topic ()");
}


void SAL_SALData::createContentFilteredTopic(const char *topicName, const
  char *filter, const StringSeq &expr)
{
  filteredtopic = participant->create_contentfilteredtopic(topicName, topic,
    filter, expr);
  checkHandle(filteredtopic.in(),
    "DomainParticipant::create_contentfilteredtopic");
}

void SAL_SALData::createContentFilteredTopic2(const char *topicName, const
  char *filter, const StringSeq &expr)
{
  filteredtopic2 = participant->create_contentfilteredtopic(topicName, topic2,
    filter, expr);
  checkHandle(filteredtopic2.in(),
    "DomainParticipant::create_contentfilteredtopic");
}

void SAL_SALData::createContentFilteredTopic(int actorIdx,const char *topicName, const char *filter, const StringSeq &expr)
{
  sal[actorIdx].filteredtopic = participant->create_contentfilteredtopic(topicName, sal[actorIdx].topic,
    filter, expr);
  checkHandle(sal[actorIdx].filteredtopic.in(),
    "DomainParticipant::create_contentfilteredtopic");
}

void SAL_SALData::createContentFilteredTopic2(int actorIdx,const char *topicName, const char *filter, const StringSeq &expr)
{
  sal[actorIdx].filteredtopic2 = participant->create_contentfilteredtopic(topicName, sal[actorIdx].topic2,
    filter, expr);
  checkHandle(sal[actorIdx].filteredtopic2.in(),
    "DomainParticipant::create_contentfilteredtopic");
}


void SAL_SALData::deleteTopics()
{
  if ( filteredtopic != NULL) {
    status = participant->delete_contentfilteredtopic(filteredtopic);
    checkStatus(status, "DDS.DomainParticipant.delete_topic");
  }
  if ( filteredtopic2 != NULL) {
    status = participant->delete_contentfilteredtopic(filteredtopic2);
    checkStatus(status, "DDS.DomainParticipant.delete_topic");
  }
  if ( topic != NULL) {
    status = participant->delete_topic(topic);
    checkStatus(status, "DDS.DomainParticipant.delete_topic");
  }
  if ( topic2 != NULL) {
    status = participant->delete_topic(topic2);
    checkStatus(status, "DDS.DomainParticipant.delete_topic");
  }
  for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
    if ( sal[i].topic != NULL) {
      status = participant->delete_topic(sal[i].topic);
      checkStatus(status, "DDS.DomainParticipant.delete_topic");
    }
    if ( sal[i].topic2 != NULL) {
      status = participant->delete_topic(sal[i].topic2);
      checkStatus(status, "DDS.DomainParticipant.delete_topic");
    }
    if ( sal[i].filteredtopic != NULL) {
      status = participant->delete_contentfilteredtopic(sal[i].filteredtopic);
      checkStatus(status, "DDS.DomainParticipant.delete_topic");
    }
    if ( sal[i].filteredtopic2 != NULL) {
      status = participant->delete_contentfilteredtopic(sal[i].filteredtopic2);
      checkStatus(status, "DDS.DomainParticipant.delete_topic");
    }
  }  

}


void SAL_SALData::createPublisher()
{
  status = participant->get_default_publisher_qos(pub_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_publisher_qos");
  pub_qos.partition.name.length(1);
  pub_qos.partition.name[0] = partition;

  publisher = participant->create_publisher(pub_qos, NULL, STATUS_MASK_NONE);
  checkHandle(publisher.in(), "DDS::DomainParticipant::create_publisher");
}

void SAL_SALData::createPublisher(int actorIdx)
{
  status = participant->get_default_publisher_qos(sal[actorIdx].pub_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_publisher_qos");
  sal[actorIdx].pub_qos.partition.name.length(1);
  sal[actorIdx].pub_qos.partition.name[0] = partition;

  sal[actorIdx].publisher = participant->create_publisher(sal[actorIdx].pub_qos, NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].publisher.in(), "DDS::DomainParticipant::create_publisher");
}


void SAL_SALData::deletePublisher()
{
    if (publisher != NULL) {
       status = participant->delete_publisher(publisher.in());
       checkStatus(status, "DDS::DomainParticipant::delete_publisher ");
    }
    for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
        if ( sal[i].publisher != NULL) {
       cout << "    deletePublisher : " << i << endl;
          status = participant->delete_publisher(sal[i].publisher.in());
          checkStatus(status, "DDS::DomainParticipant::delete_publisher ");
        }
    }
}



void SAL_SALData::createWriter(int actorIdx,bool autodispose_unregistered_instances)
{
  status = sal[actorIdx].publisher->get_default_datawriter_qos(sal[actorIdx].dw_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_publisher_qos");
  status = sal[actorIdx].publisher->copy_from_topic_qos(sal[actorIdx].dw_qos, sal[actorIdx].reliable_topic_qos);
  checkStatus(status, "DDS::Publisher::copy_from_topic_qos");
  sal[actorIdx].dw_qos.writer_data_lifecycle.autodispose_unregistered_instances = autodispose_unregistered_instances;
  sal[actorIdx].writer = sal[actorIdx].publisher->create_datawriter(sal[actorIdx].topic.in(), sal[actorIdx].dw_qos, NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].writer, "DDS::Publisher::create_datawriter");
  sal[actorIdx].isWriter = true;
  cout << "createWriter : " << sal[actorIdx].topic << " , " << sal[actorIdx].typeName << " , " << sal[actorIdx].topicHandle << endl;
}

void SAL_SALData::createWriter2(int actorIdx,bool autodispose_unregistered_instances)
{
  status = sal[actorIdx].publisher->get_default_datawriter_qos(sal[actorIdx].dw_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_publisher_qos");
  status = sal[actorIdx].publisher->copy_from_topic_qos(sal[actorIdx].dw_qos, sal[actorIdx].reliable_topic_qos2);
  checkStatus(status, "DDS::Publisher::copy_from_topic_qos");
  sal[actorIdx].dw_qos.writer_data_lifecycle.autodispose_unregistered_instances = autodispose_unregistered_instances;
  sal[actorIdx].writer2 = sal[actorIdx].publisher->create_datawriter(sal[actorIdx].topic2.in(), sal[actorIdx].dw_qos, NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].writer2, "DDS::Publisher::create_datawriter");
  sal[actorIdx].isWriter = true;
  cout << "createWriter2 : " << sal[actorIdx].topic2 << " , "  << sal[actorIdx].typeName2 << " , " << sal[actorIdx].topicHandle << endl;
}

void SAL_SALData::deleteWriter()
{
  if (writer != NULL) {
    status = publisher->delete_datawriter(writer);
    checkStatus(status, "DDS::Publisher::delete_datawriter ");
  }
  if (writer2 != NULL) {
    status = publisher->delete_datawriter(writer2);
    checkStatus(status, "DDS::Publisher::delete_datawriter ");
  }
  for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
      if ( sal[i].writer != NULL) {
        status = sal[i].publisher->delete_datawriter(sal[i].writer);
        checkStatus(status, "DDS::Publisher::delete_datawriter ");
      }
      if ( sal[i].writer2 != NULL) {
        status = sal[i].publisher->delete_datawriter(sal[i].writer2);
        checkStatus(status, "DDS::Publisher::delete_datawriter ");
      }
  }
}

void SAL_SALData::createSubscriber()
{
  int status = participant->get_default_subscriber_qos(sub_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_subscriber_qos");
  sub_qos.partition.name.length(1);
  sub_qos.partition.name[0] = partition;
  subscriber = participant->create_subscriber(sub_qos, NULL, STATUS_MASK_NONE);
  checkHandle(subscriber.in(), "DDS::DomainParticipant::create_subscriber");
}


void SAL_SALData::createSubscriber(int actorIdx)
{
  int status = participant->get_default_subscriber_qos(sal[actorIdx].sub_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_subscriber_qos");
  sal[actorIdx].sub_qos.partition.name.length(1);
  sal[actorIdx].sub_qos.partition.name[0] = partition;
  sal[actorIdx].subscriber = participant->create_subscriber(sal[actorIdx].sub_qos, NULL, STATUS_MASK_NONE);
  checkHandle(sal[actorIdx].subscriber.in(), "DDS::DomainParticipant::create_subscriber");
}


void SAL_SALData::deleteSubscriber()
{
  if (subscriber != NULL) {
     status = participant->delete_subscriber(subscriber);
     checkStatus(status, "DDS::DomainParticipant::delete_subscriber ");
  }
  for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
    if (sal[i].subscriber != NULL) {
      status = participant->delete_subscriber(sal[i].subscriber);
      checkStatus(status, "DDS::DomainParticipant::delete_subscriber ");
    }
  }
}


void SAL_SALData::createReader(int actorIdx,bool filtered)
{
  status = sal[actorIdx].subscriber->get_default_datareader_qos(sal[actorIdx].dr_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_datareader_qos");
  status = sal[actorIdx].subscriber->copy_from_topic_qos(sal[actorIdx].dr_qos, sal[actorIdx].reliable_topic_qos);
  checkStatus(status, "DDS::Subscriber::copy_from_topic_qos");
  if (filtered) {
    sal[actorIdx].reader = sal[actorIdx].subscriber->create_datareader(sal[actorIdx].filteredtopic.in(),
    DATAREADER_QOS_USE_TOPIC_QOS, NULL, STATUS_MASK_NONE);
  } else {
    sal[actorIdx].reader = sal[actorIdx].subscriber->create_datareader(sal[actorIdx].topic.in(),
    DATAREADER_QOS_USE_TOPIC_QOS, NULL, STATUS_MASK_NONE);
  }
  checkHandle(sal[actorIdx].reader, "DDS::Subscriber::create_datareader ()");
  sal[actorIdx].isReader = true;
  DDS::Duration_t a_timeout;
  a_timeout.sec = historySync;
  a_timeout.nanosec = 10000000;
  sal[actorIdx].sampleAge = 1.0e20;
  status = sal[actorIdx].reader->wait_for_historical_data(a_timeout);
  cout << "createReader : " << sal[actorIdx].topic << " , " << sal[actorIdx].typeName << " , "  << sal[actorIdx].topicHandle << endl;
}

void SAL_SALData::createReader2(int actorIdx,bool filtered)
{
  status = sal[actorIdx].subscriber->get_default_datareader_qos(sal[actorIdx].dr_qos);
  checkStatus(status, "DDS::DomainParticipant::get_default_datareader_qos");
  status = sal[actorIdx].subscriber->copy_from_topic_qos(sal[actorIdx].dr_qos, sal[actorIdx].reliable_topic_qos2);
  checkStatus(status, "DDS::Subscriber::copy_from_topic_qos");
  if (filtered) {
    sal[actorIdx].reader2 = sal[actorIdx].subscriber->create_datareader(sal[actorIdx].filteredtopic2.in(),
    sal[actorIdx].dr_qos, NULL, STATUS_MASK_NONE);
  } else {
    sal[actorIdx].reader2 = sal[actorIdx].subscriber->create_datareader(sal[actorIdx].topic2.in(),
    sal[actorIdx].dr_qos, NULL, STATUS_MASK_NONE);
  }
  checkHandle(sal[actorIdx].reader2, "DDS::Subscriber::create_datareader ()");
  sal[actorIdx].isReader = true;
  DDS::Duration_t a_timeout;
  a_timeout.sec = historySync;
  a_timeout.nanosec = 10000000;
  sal[actorIdx].sampleAge = 1.0e20;
  status = sal[actorIdx].reader2->wait_for_historical_data(a_timeout);
  cout << "createReader2 : " << sal[actorIdx].topic2 << " , " << sal[actorIdx].typeName2 << " , " << sal[actorIdx].topicHandle << endl;
}


void SAL_SALData::deleteReader()
{
  if (reader != NULL) {
    status = subscriber->delete_datareader(reader);
    checkStatus(status, "DDS::Subscriber::delete_datareader ");
  }
  if (reader2 != NULL) {
    status = subscriber->delete_datareader(reader2);
    checkStatus(status, "DDS::Subscriber::delete_datareader ");
  }
  for (int i=0; i<SAL__ACTORS_MAXCOUNT;i++) {
    if (sal[i].reader != NULL) {
      status = sal[i].subscriber->delete_datareader(sal[i].reader);
      checkStatus(status, "DDS::Subscriber::delete_datareader ");
    }
    if (sal[i].reader2 != NULL) {
      status = sal[i].subscriber->delete_datareader(sal[i].reader2);
      checkStatus(status, "DDS::Subscriber::delete_datareader ");
    }
  }
}



DataReader_ptr SAL_SALData::getReader()
{
  return DataReader::_duplicate(reader.in());
}

DataReader_ptr SAL_SALData::getReader2()
{
  return DataReader::_duplicate(reader2.in());
}

DataReader_ptr SAL_SALData::getReader(int actorIdx)
{
  return DataReader::_duplicate(sal[actorIdx].reader.in());
}

DataReader_ptr SAL_SALData::getReader2(int actorIdx)
{
  return DataReader::_duplicate(sal[actorIdx].reader2.in());
}



DataWriter_ptr SAL_SALData::getWriter()
{
  return DataWriter::_duplicate(writer.in());
}

DataWriter_ptr SAL_SALData::getWriter2()
{
  return DataWriter::_duplicate(writer2.in());
}


DataWriter_ptr SAL_SALData::getWriter(int actorIdx)
{
  return DataWriter::_duplicate(sal[actorIdx].writer.in());
}

DataWriter_ptr SAL_SALData::getWriter2(int actorIdx)
{
  return DataWriter::_duplicate(sal[actorIdx].writer2.in());
}



Publisher_ptr SAL_SALData::getPublisher()
{
  return Publisher::_duplicate(publisher.in());
}

Subscriber_ptr SAL_SALData::getSubscriber()
{
  return Subscriber::_duplicate(subscriber.in());
}


Publisher_ptr SAL_SALData::getPublisher(int actorIdx)
{
  return Publisher::_duplicate(sal[actorIdx].publisher.in());
}

Subscriber_ptr SAL_SALData::getSubscriber(int actorIdx)
{
  return Subscriber::_duplicate(sal[actorIdx].subscriber.in());
}


Topic_ptr SAL_SALData::getTopic()
{
  return Topic::_duplicate(topic.in());
}

Topic_ptr SAL_SALData::getTopic(int actorIdx)
{
  return Topic::_duplicate(sal[actorIdx].topic.in());
}

Topic_ptr SAL_SALData::getTopic2(int actorIdx)
{
  return Topic::_duplicate(sal[actorIdx].topic2.in());
}



DomainParticipant_ptr SAL_SALData::getParticipant()
{
  return DomainParticipant::_duplicate(participant.in());
}

SAL_SALData::~SAL_SALData(){
    salShutdown();
}




