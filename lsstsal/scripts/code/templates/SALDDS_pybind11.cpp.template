#include <string>
#include <typeinfo>
#include <iostream>

#include "SAL_SALData.h"

#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>

namespace py = pybind11;

/**
 * Type trait helper for array properties
 */
template <typename T>
struct array_trait_impl;

template <typename T, typename C, size_t N>
struct array_trait_impl<T (C::*)[N]> {
    using object_type = C;
    using value_type = T;
    static constexpr size_t size = N;
};

/**
 * Type trait for array properties
 *
 * Has the following members:
 *  - object_type, (when given a pointer to a member array) type of object
 *    (e.g. `Foo` for `&Foo::bar`)
 *  - value_type, type of array value (e.g. `int` in `int[10]`)
 *  - size, of static array (e.g. `10` in `int[10]`)
 */
template <typename T>
struct array_trait : array_trait_impl<typename std::remove_pointer<T>::type> {};

/**
 * Return a wrapper around a fixed-size array that can be bound to a
 * pybind11 property.
 *
 * @param array, a pointer to a fixed-size array member (e.g. `int[10]`)
 *
 * @returns lambda that takes a reference to an object and returns a NumPy
 * ndarray view (that shares the underlying storage). Return-value-policy
 * is set to `reference_internal` so modifications of elements change the
 * values in the underlying array.
 *
 * @note bind with e.g. `cls.def_property_readonly("bar", make_array(&Foo::bar));` (`readwrite` is not supported, but modification of array elements is).
 */
template <typename T>
auto make_array(T array) -> std::function<py::array(typename array_trait<T>::object_type const &)> {
    return [array](typename array_trait<T>::object_type const &self) {
        return py::array(array_trait<T>::size, self.*array, py::none());
    };
}


PYBIND11_MODULE(SALPY_SALData,m){

// INSERT_SAL_PYTHON_DATATYPES
    py::class_<SAL_SALData>(m,"SAL_SALData")    
         .def(py::init<int>())   

         .def(py::init<>())   

// INSERT CMDALIAS SUPPORT  for issueCommand and acceptCommand  
        .def( 
            "getDebugLevel"
            , (int ( ::SAL_SALData::* )( int ) )( &::SAL_SALData::getDebugLevel )
            , ( py::arg("level") ) )    
        .def( 
            "getOrigin"
            , (int ( ::SAL_SALData::* )(  ) )( &::SAL_SALData::getOrigin ) )    
        .def( 
            "logError"
            , (void ( ::SAL_SALData::* )( ::salReturn ) )( &::SAL_SALData::logError )
            , ( py::arg("status") ) )    
        .def( 
            "getCommandNames"
            , &::SAL_SALData::getCommandNames )
        .def( 
            "getEventNames"
            , &::SAL_SALData::getEventNames )
        .def( 
            "getTelemetryNames"
            , &::SAL_SALData::getTelemetryNames )
        .def( 
            "getSALVersion"
            , &::SAL_SALData::getSALVersion )
        .def( 
            "getXMLVersion"
            , &::SAL_SALData::getXMLVersion )
        .def( 
            "getCurrentTime"
            , (double ( ::SAL_SALData::* )(  ) )( &::SAL_SALData::getCurrentTime ) )
        .def( 
            "getLeapSeconds"
            , (int ( ::SAL_SALData::* )(  ) )( &::SAL_SALData::getLeapSeconds ) )
// INSERT EVENTALIAS SUPPORT 
        .def( 
            "setTuneableQos"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::setTuneableQos )
            , ( py::arg("alias") ) )    
        .def( 
            "setDefaultQos"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::setDefaultQos )
            , ( py::arg("alias") ) )    
        .def( 
            "salShutdown"
            , (void ( ::SAL_SALData::* )(  ) )( &::SAL_SALData::salShutdown ) )    
        .def( 
            "salTelemetryPub"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::salTelemetryPub )
            , ( py::arg("topicName") ) )    
        .def( 
            "salTelemetrySub"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::salTelemetrySub )
            , ( py::arg("topicName") ) )    
        .def( 
            "salEventSub"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::salEventSub )
            , ( py::arg("topicName") ) )    
        .def( 
            "salEventPub"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::salEventPub )
            , ( py::arg("topicName") ) )    
        .def( 
            "setDebugLevel"
            , (::salReturn ( ::SAL_SALData::* )( int ) )( &::SAL_SALData::setDebugLevel )
            , ( py::arg("level") ) )    
        .def( 
            "getRcvdTime"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::getRcvdTime )
            , ( py::arg("topicName") ) )    
        .def( 
            "getSentTime"
            , (::salReturn ( ::SAL_SALData::* )( char * ) )( &::SAL_SALData::getSentTime )
            , ( py::arg("topicName") ) )    
// INSERT_SAL_PYTHON_GETPUT
        ;

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
        m.attr("componentIsMultiple")   = 1;
#else 
        m.attr("componentIsMultiple")   = 0;
#endif
        m.attr("componentName")         = "SAL_SALData";
        m.attr("SAL__OK") 		= SAL__OK;
	m.attr("SAL__ERR") 		= SAL__ERR;
	m.attr("SAL__ERROR") 		= SAL__ERROR;
	m.attr("SAL__ILLEGAL_REVCODE")  = SAL__ILLEGAL_REVCODE;
	m.attr("SAL__TOO_MANY_HANDLES") = SAL__TOO_MANY_HANDLES;
	m.attr("SAL__NOT_DEFINED") 	= SAL__NOT_DEFINED;
	m.attr("SAL__NO_UPDATES")	= SAL__NO_UPDATES;
	m.attr("SAL__WAITING_FOR_NEXT") = SAL__WAITING_FOR_NEXT;
	m.attr("SAL__GOT_UPDATE") 	= SAL__GOT_UPDATE;
	m.attr("SAL__SYNC_IN") 		= SAL__SYNC_IN;
	m.attr("SAL__SYNC_OUT") 	= SAL__SYNC_OUT;
	m.attr("SAL__SYNC_SET") 	= SAL__SYNC_SET;
	m.attr("SAL__SYNC_CLEAR") 	= SAL__SYNC_CLEAR;
	m.attr("SAL__SYNC_READ") 	= SAL__SYNC_READ;
	m.attr("SAL__EVENT_INFO") 	= SAL__EVENT_INFO;
	m.attr("SAL__EVENT_WARN ")	= SAL__EVENT_WARN;
	m.attr("SAL__EVENT_ERROR")	= SAL__EVENT_ERROR;
	m.attr("SAL__EVENT_ABORT") 	= SAL__EVENT_ABORT;
	m.attr("SAL__CMD_ACK") 		= SAL__CMD_ACK;
	m.attr("SAL__CMD_INPROGRESS") 	= SAL__CMD_INPROGRESS;
	m.attr("SAL__CMD_STALLED") 	= SAL__CMD_STALLED;
	m.attr("SAL__CMD_COMPLETE") 	= SAL__CMD_COMPLETE;
	m.attr("SAL__CMD_NOPERM") 	= SAL__CMD_NOPERM;
	m.attr("SAL__CMD_NOACK") 	= SAL__CMD_NOACK;
	m.attr("SAL__CMD_FAILED") 	= SAL__CMD_FAILED;
	m.attr("SAL__CMD_ABORTED") 	= SAL__CMD_ABORTED;
	m.attr("SAL__CMD_TIMEOUT") 	= SAL__CMD_TIMEOUT;
	m.attr("SAL__DATA_AVAIL") 	= SAL__DATA_AVAIL;
	m.attr("SAL__DEADLINE_MISS") 	= SAL__DEADLINE_MISS;
	m.attr("SAL__INCOMPAT_QOS") 	= SAL__INCOMPAT_QOS;
	m.attr("SAL__SAMPLE_REJ") 	= SAL__SAMPLE_REJ;
	m.attr("SAL__LIVELINESS_CHG") 	= SAL__LIVELINESS_CHG;
	m.attr("SAL__SAMPLELOST")	= SAL__SAMPLELOST;
	m.attr("SAL__SUBSCR_MATCH") 	= SAL__SUBSCR_MATCH;
        m.attr("SAL__STATE_DISABLED") 	= SAL__STATE_DISABLED;
        m.attr("SAL__STATE_ENABLED") 	= SAL__STATE_ENABLED;
        m.attr("SAL__STATE_FAULT") 	= SAL__STATE_FAULT;
        m.attr("SAL__STATE_OFFLINE") 	= SAL__STATE_OFFLINE;
        m.attr("SAL__STATE_STANDBY") 	= SAL__STATE_STANDBY;
        m.attr("SAL__STATE_COUNT") 	= SAL__STATE_COUNT;
}


